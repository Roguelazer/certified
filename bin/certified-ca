#!/bin/sh

#/ Usage: certified-ca [--bits=<bits>] [--crl-url=<crl-url>] [--days=<days>] [--db=<db>] [--ocsp-url=<ocsp-url>] [--password=<password>] C=<country> [ST=<state>] L=<locality> [O=<organization>] CN=<common-name>
#/   --bits=<bits>         bits to use for the private key (defaults to 2048)
#/   --crl-url=<crl-url>   CRL distribution URL
#/   --days=<days>         days until the certificate expires (defaults to 3650)
#/   --db=<db>             OpenSSL database directory (defaults to etc/ssl)
#/   --ocsp-url=<ocsp-url> OCSP responder URL
#/   --password=<password> password for the CA private key
#/   C=<country>           certificate country
#/   ST=<state>            certificate state (optional)
#/   L=<locality>          certificate locality (usually a city)
#/   O=<organization>      certificate organization (usually a company)
#/   CN=<common-name>      certificate common name (usually a domain name or Company CA)

set -e

. "$(dirname "$(dirname "$0")")/lib/certified.sh"

while [ "$#" -gt 0 ]
do
    case "$1" in
        --bits) BITS="$2" shift 2;;
        --bits=*) BITS="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --crl-url) CRL_URL="$2" shift 2;;
        --crl-url=*) CRL_URL="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --days) DAYS="$2" shift 2;;
        --days=*) DAYS="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --db) DB="$2" shift 2;;
        --db=*) DB="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --ocsp-url) OCSP_URL="$2" shift 2;;
        --ocsp-url=*) OCSP_URL="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        --password) PASSWORD="$2" shift 2;;
        --password=*) PASSWORD="$(echo "$1" | cut -d"=" -f"2-")" shift;;
		-h|--help) usage 0;;
		-*) usage 1;;
        C=*) C="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        CN=*) CN="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        L=*) L="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        O=*) O="$(echo "$1" | cut -d"=" -f"2-")" shift;;
        ST=*) ST="$(echo "$1" | cut -d"=" -f"2-")" shift;;
		*) usage 1;;
    esac
done
[ "$C" -a "$L" -a "$CN" ] || usage 1

mkdir -p "$DB/certs" "$DB/private"
cd "$DB"

if [ -f "certs/ca.crt" ]
then die "CA already exists in $DB"
fi
if [ -f "private/root-ca.key" -o -f "certs/root-ca.crt" -o -f "private/ca.key" ]
then die "CA already partially exists in $DB"
fi

touch "ca.db" "ca.db.attr"
if [ ! -f "ca.db.serial" ]
then echo "01" >"ca.db.serial"
fi

{
    cat <<EOF
[dn]
EOF
    if_echo "$C" "C = $C"
    if_echo "$ST" "ST = $ST"
    if_echo "$L" "L = $L"
    if_echo "$O" "O = $O"
    cat <<EOF
CN = $CN

[req]
default_bits = $BITS
default_md = sha1
distinguished_name = dn
prompt = no

[x509_extensions]
EOF
    echo "basicConstraints = critical, CA:TRUE, pathlen:1"
    cat <<EOF
keyUsage = critical, cRLSign, keyCertSign, nonRepudiation
subjectKeyIdentifier = hash
EOF
} >"ca.cnf"

if [ "$PASSWORD" ]
then
    if [ "$PASSWORD" = "-" ]
    then read PASSWORD
    fi
    PASSIN="pass:$PASSWORD" PASSOUT="pass:$PASSWORD"
    log "generating RSA private key"
    openssl genrsa -des3 -out "private/root-ca.key" -passout "$PASSOUT" "$BITS"
    log "signing the CA certificate"
    openssl req -config "ca.cnf" -days "$DAYS" -extensions "x509_extensions" -key "private/root-ca.key" -new -out "certs/root-ca.crt" -passin "$PASSIN" -x509
else
    log "generating RSA private key; please choose and confirm a password"
    openssl genrsa -des3 -out "private/root-ca.key" "$BITS"
    log "signing the CA certificate; please enter the CA password"
    openssl req -config "ca.cnf" -days "$DAYS" -extensions "x509_extensions" -key "private/root-ca.key" -new -out "certs/root-ca.crt" -x509
fi

{
    cat <<EOF
: \${BITS:="$BITS"}
: \${CRL_URL:="$CRL_URL"}
: \${DAYS:="$DAYS"}
: \${OCSP_URL:="$OCSP_URL"}

EOF
    if_echo "$C" ": \${C:=\"$C\"}"
    if_echo "$ST" ": \${ST:=\"$ST\"}"
    if_echo "$L" ": \${L:=\"$L\"}"
    if_echo "$O" ": \${O:=\"$O\"}"
} >"defaults.sh"

certified-csr --bits="$BITS" --ca --days="$DAYS" --db="$DB" --issuer="root-ca" --name="ca" C="$C" CN="$CN" L="$L" O="$O" ST="$ST"
certified-crt --days="$DAYS" --db="$DB" --name="ca" --password="$PASSWORD" CN="$CN"

git init -q
git add "."
git commit -m"$MESSAGE" -q

echo >&2
log "install this certificate on your laptops and servers"
cat "certs/root-ca.crt"
